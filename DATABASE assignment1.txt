CREATE DATABASE assignment;
use assignment;
1. Create a table called employees with the following structure
 emp_id (integer, should not be NULL and should be a primary key)
 emp_name (text, should not be NULL)
 age (integer, should have a check constraint to ensure the age is at least 18)
 email (text, should be unique for each employee)
 salary (decimal, with a default value of 30,000).
 Write the SQL query to create the above table with all constraints.create table  employees(
emp_id integer primary key not null,
emp_name text not NULL,
age integer check(age>=18),
email VARCHAR(255) unique,
salary decimal default 30000);
2.Explain the purpose of constraints and how they help maintain data integrity in a database. Provide 
examples of common types of constraints.
 
Purpose of Constraints in a Database
Constraints are rules applied to database columns to enforce data integrity, consistency, and reliability. They ensure that the data stored in the database is accurate and follows business rules, helping prevent invalid, duplicate, or inconsistent data from being entered.

 How Constraints Help Maintain Data Integrity
Prevent invalid data (e.g., negative age or null name)

Avoid duplicates (e.g., same email for two users)

Maintain relationships between tables (e.g., orders must reference valid customers)

Enforce required data (e.g., name must not be empty)

Set defaults for missing values (e.g., default salary)


3.Why would you apply the NOT NULL constraint to a column? Can a primary key contain NULL values? Justify 
your answer.
 Why Use the NOT NULL Constraint?
The NOT NULL constraint is used to ensure that a column cannot have NULL values. 
This is important when the data in that column is required for the row to be valid or meaningful.

Reasons to Use NOT NULL:
Ensures Required Data
Prevents critical fields (like emp_name, email, or date_of_birth) from being left blank.

Improves Data Integrity
Ensures the presence of values that are essential for business logic or calculations.

Enhances Query Logic
Avoids issues when performing comparisons, joins, or calculations, as NULL values can cause unexpected behavior.

Can a Primary Key Contain NULL Values?
No, a primary key cannot contain NULL values.

Justification:
A primary key uniquely identifies each row in a table.

NULL means "unknown", and if allowed, it would mean the row’s identity is unknown.

Uniqueness + NULL = contradiction: You can't uniquely identify a row if its key is NULL.

MySQL (and other RDBMSs) automatically enforce NOT NULL when you declare a column as PRIMARY KEY.

4. Explain the steps and SQL commands used to add or remove constraints on an existing table. Provide an 
example for both adding and removing a constraint.

Steps to Add a Constraint

Identify the table where you want to add the constraint.

Decide the type of constraint (PRIMARY KEY, UNIQUE, CHECK, FOREIGN KEY, DEFAULT).

Use the ALTER TABLE ... ADD CONSTRAINT command.

Give the constraint a meaningful name (so you can easily remove it later).

 Example: Adding a CHECK constraint

Suppose you want to ensure salary must always be greater than 0 in the employees table.

ALTER TABLE employees
ADD CONSTRAINT chk_salary CHECK (salary > 0);
Steps to Remove a Constraint

Find the name of the constraint you want to remove.

In PostgreSQL, you can use \d employees.

In MySQL, use SHOW CREATE TABLE employees;.

In SQL Server, query INFORMATION_SCHEMA.TABLE_CONSTRAINTS.

Use the ALTER TABLE ... DROP CONSTRAINT command.
 
 ALTER TABLE employees
DROP CONSTRAINT chk_salary;

 5. Explain the consequences of attempting to insert, update, or delete data in a way that violates constraints. 
Provide an example of an error message that might occur when violating a constraint.
 1. PRIMARY KEY Violation

Rule: Primary key must be unique and not NULL.

If violated: Insert/update fails.



 INSERT INTO employees (emp_id, emp_name, age, email, salary)
VALUES (1, 'John', 25, 'john@example.com', 40000);

-- Attempting duplicate emp_id
INSERT INTO employees (emp_id, emp_name, age, email, salary)
VALUES (1, 'Alice', 30, 'alice@example.com', 50000);

-- 16:26:18	INSERT INTO employees (emp_id, emp_name, age, email, salary) VALUES (1, 'Alice', 30, 'alice@example.com', 50000)	Error Code: 1062. Duplicate entry '1' for key 'employees.PRIMARY'	0.015 sec
 2. UNIQUE Constraint Violation

Rule: No two rows can have the same value in a unique column.

If violated: Insert/update fails.


INSERT INTO employees (emp_id, emp_name, age, email, salary)
VALUES (2, 'Bob', 28, 'john@example.com', 35000); -- email already exists
-- 16:27:50	INSERT INTO employees (emp_id, emp_name, age, email, salary) VALUES (2, 'Bob', 28, 'john@example.com', 35000)	Error Code: 1062. Duplicate entry 'john@example.com' for key 'employees.email'	0.000 sec
3. CHECK Constraint Violation

Rule: Value must satisfy the check condition.

If violated: Insert/update fails.


INSERT INTO employees (emp_id, emp_name, age, email, salary)
VALUES (3, 'Charlie', 16, 'charlie@example.com', 25000); -- age < 18

-- 16:28:40	INSERT INTO employees (emp_id, emp_name, age, email, salary) VALUES (3, 'Charlie', 16, 'charlie@example.com', 25000)	Error Code: 3819. Check constraint 'employees_chk_1' is violated.	0.000 sec
4. NOT NULL Violation

Rule: Column cannot contain NULL.

If violated: Insert/update fails.

INSERT INTO employees (emp_id, emp_name, age, email, salary)
VALUES (4, NULL, 22, 'david@example.com', 32000); -- emp_name is NULL

-- 16:29:39	INSERT INTO employees (emp_id, emp_name, age, email, salary) VALUES (4, NULL, 22, 'david@example.com', 32000)	Error Code: 1048. Column 'emp_name' cannot be null	0.000 sec
5. FOREIGN KEY Violation (if table has FK)

Rule: Value must exist in the referenced table.

If violated: Insert/update/delete fails.


INSERT INTO salaries (emp_id, amount) VALUES (999, 50000); -- 999 not in employees
-- 16:30:24	INSERT INTO salaries (emp_id, amount) VALUES (999, 50000)	Error Code: 1146. Table 'assignment.salaries' doesn't exist	0.000 sec
CREATE TABLE products (
    product_id INT PRIMARY KEY,                -- Unique, not null
    product_name VARCHAR(50) NOT NULL,         -- Must have a name
    price DECIMAL(10,2) CHECK (price >= 0)     -- Price must be non-negative
);

ALTER TABLE products
ALTER COLUMN price SET DEFAULT 50.00;
 7. You have two tables:
Write a query to fetch the student_name and class_name for each student using an INNER JOIN

SELECT student_name, class_name
FROM Students s
INNER JOIN Classes c 
    ON s.class_id = c.class_id;
    
8. Consider the following three tables:    
    Write a query that shows all order_id, customer_name, and product_name, ensuring that all products are 
listed even if they are not associated with an order 
Hint: (use INNER JOIN and LEFT JOIN).

SELECT 
    o.order_id,
    c.customer_name,
    p.product_name
FROM Products p
LEFT JOIN Orders o 
    ON p.order_id = o.order_id
INNER JOIN Customers c
    ON o.customer_id = c.customer_id;

9. Given the following tables:
Write a query to find the total sales amount for each product using an INNER JOIN and the SUM() function.

SELECT 
    p.product_name,
    SUM(s.amount) AS total_sales
FROM Sales s
INNER JOIN Products p 
    ON s.product_id = p.product_id
GROUP BY p.product_name;

 10. You are given three tables
Write a query to display the order_id, customer_name, and the quantity of products ordered by each 
customer using an INNER JOIN between all three tables

SELECT 
    o.order_id,
    c.customer_name,
    COUNT(p.product_id) AS quantity_ordered
FROM Orders o
INNER JOIN Customers c 
    ON o.customer_id = c.customer_id
INNER JOIN Products p 
    ON o.order_id = p.order_id
GROUP BY o.order_id, c.customer_name;

SQL Commands
1. Identify the primary keys and foreign keys in maven movies db. Discuss the differences

Primary Key (PK): A column (or set of columns) that uniquely identifies each record in a table. (e.g., customer_id in customer table).

Foreign Key (FK): A column that establishes a link between two tables (references a PK from another table). (e.g., customer_id in rental table is a FK referencing customer_id in customer table).
 
 2. List all details of actors
 SELECT * 
FROM actor;
 3. List all customer information from DB
SELECT * 
FROM customer;
4. List different countries
SELECT DISTINCT country 
FROM country;
5. Display all active customers
 SELECT * 
FROM customer
WHERE active = 1;
6. List all rental IDs for customer with ID 1   
 SELECT rental_id 
FROM rental
WHERE customer_id = 1;
7. Display all the films whose rental duration is greater than 5
SELECT film_id, title, rental_duration
FROM film
WHERE rental_duration > 5;
8. List the total number of films whose replacement cost is greater than $15 and less than $20
SELECT COUNT(*) AS total_films
FROM film
WHERE replacement_cost > 15 
  AND replacement_cost < 20;
9. Display the count of unique first names of actors
 SELECT COUNT(DISTINCT first_name) AS unique_first_names
FROM actor;
10. Display the first 10 records from the customer table
SELECT * 
FROM customer
LIMIT 10;
11. Display the first 3 records from the customer table whose first name starts with ‘b’
SELECT * 
FROM customer
WHERE first_name LIKE 'B%'
LIMIT 3;
12. Display the names of the first 5 movies which are rated as ‘G’
SELECT title 
FROM film
WHERE rating = 'G'
LIMIT 5;
13. Find all customers whose first name starts with "a"
SELECT * 
FROM customer
WHERE first_name LIKE 'A%';
14. Find all customers whose first name ends with "a"
SELECT * 
FROM customer
WHERE first_name LIKE '%a';
15. Display the list of first 4 cities which start and end with ‘a’
SELECT city
FROM city
WHERE city LIKE 'A%a'
LIMIT 4;
16. Find all customers whose first name has "NI" in any position
SELECT * 
FROM customer
WHERE first_name LIKE '%NI%';
17. Find all customers whose first name has "r" in the second position
SELECT * 
FROM customer
WHERE first_name LIKE '_r%';
18. Find all customers whose first name starts with "a" and are at least 5 characters in length
SELECT * 
FROM customer
WHERE first_name LIKE 'A%' 
  AND LENGTH(first_name) >= 5;
19. Find all customers whose first name starts with "a" and ends with "o"
SELECT * 
FROM customer
WHERE first_name LIKE 'A%o';
20. Get the films with PG and PG-13 rating using IN operator
  SELECT title, rating
FROM film
WHERE rating IN ('PG', 'PG-13');
21. Get the films with length between 50 to 100 using BETWEEN operator
SELECT title, length
FROM film
WHERE length BETWEEN 50 AND 100;
22. Get the top 50 actors using LIMIT operator
SELECT * 
FROM actor
LIMIT 50;
23. Get the distinct film_ids from inventory table
SELECT DISTINCT film_id 
FROM inventory;

Functions
 Basic Aggregate Functions:
Question 1: Retrieve the total number of rentals made in the Sakila database. Hint: Use the COUNT() function.
 
 SELECT COUNT(*) AS total_rentals
FROM rental;

 Question 2:
 Find the average rental duration (in days) of movies rented from the Sakila database.
 Hint: Utilize the AVG() function.
 
SELECT AVG(rental_duration) AS avg_rental_duration
FROM film;

String Functions:
 Question 3:
 Display the first name and last name of customers in uppercase.
 Hint: Use the UPPER () function

SELECT UPPER(first_name) AS first_name_upper,
       UPPER(last_name)  AS last_name_upper
FROM customer;

Question 4:
 Extract the month from the rental date and display it alongside the rental ID.
 Hint: Employ the MONTH() function
SELECT rental_id,
       MONTH(rental_date) AS rental_month
FROM rental;

GROUP BY:
 Question 5:
 Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
 Hint: Use COUNT () in conjunction with GROUP BY.
 SELECT customer_id,
       COUNT(rental_id) AS rental_count
FROM rental
GROUP BY customer_id;

Question 6:
 Find the total revenue generated by each store.
 Hint: Combine SUM() and GROUP BY.
 SELECT c.store_id,
       SUM(p.amount) AS total_revenue
FROM payment p
INNER JOIN customer c 
       ON p.customer_id = c.customer_id
GROUP BY c.store_id;

Question 7:
 Determine the total number of rentals for each category of movies.
 Hint: JOIN film_category, film, and rental tables, then use cOUNT () and GROUP BY.
 SELECT cat.name AS category,
       COUNT(r.rental_id) AS total_rentals
FROM category cat
INNER JOIN film_category fc 
       ON cat.category_id = fc.category_id
INNER JOIN film f 
       ON fc.film_id = f.film_id
INNER JOIN inventory i 
       ON f.film_id = i.film_id
INNER JOIN rental r 
       ON i.inventory_id = r.inventory_id
GROUP BY cat.name
ORDER BY total_rentals DESC;
Question 8:
 Find the average rental rate of movies in each language.
 Hint: JOIN film and language tables, then use AVG () and GROUP BY.

 Question 8:
 Find the average rental rate of movies in each language.
 Hint: JOIN film and language tables, then use AVG () and GROUP BY.

 SELECT l.name AS language,
       AVG(f.rental_rate) AS avg_rental_rate
FROM film f
INNER JOIN language l 
       ON f.language_id = l.language_id
GROUP BY l.name
ORDER BY avg_rental_rate DESC;

Questions 9 -
 Display the title of the movie, customer s first name, and last name who rented it.
 Hint: Use JOIN between the film, inventory, rental, and customer tables.
 
 SELECT f.title AS movie_title,
       c.first_name,
       c.last_name
FROM film f
INNER JOIN inventory i 
       ON f.film_id = i.film_id
INNER JOIN rental r 
       ON i.inventory_id = r.inventory_id
INNER JOIN customer c 
       ON r.customer_id = c.customer_id
ORDER BY f.title, c.last_name;

Question 10:
 Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
 Hint: Use JOIN between the film actor, film, and actor tables.
 SELECT a.first_name, 
       a.last_name
FROM film f
INNER JOIN film_actor fa 
       ON f.film_id = fa.film_id
INNER JOIN actor a 
       ON fa.actor_id = a.actor_id
WHERE f.title = 'GONE WITH THE WIND';

Question 11:
 Retrieve the customer names along with the total amount they've spent on rentals.
 Hint: JOIN customer, payment, and rental tables, then use SUM() and GROUP BY.
 
 SELECT c.first_name,
       c.last_name,
       SUM(p.amount) AS total_spent
FROM customer c
INNER JOIN payment p 
       ON c.customer_id = p.customer_id
INNER JOIN rental r 
       ON p.rental_id = r.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;

Question 12:
 List the titles of movies rented by each customer in a particular city (e.g., 'London').
 Hint: JOIN customer, address, city, rental, inventory, and film tables, then use GROUP BY.
SELECT c.first_name,
       c.last_name,
       f.title AS rented_movie
FROM customer c
INNER JOIN address a 
       ON c.address_id = a.address_id
INNER JOIN city ci 
       ON a.city_id = ci.city_id
INNER JOIN rental r 
       ON c.customer_id = r.customer_id
INNER JOIN inventory i 
       ON r.inventory_id = i.inventory_id
INNER JOIN film f 
       ON i.film_id = f.film_id
WHERE ci.city = 'Lond

 Question 13:
 Display the top 5 rented movies along with the number of times they've been rented.
 Hint: JOIN film, inventory, and rental tables, then use COUNT () and GROUP BY, and limit the results.
 
SELECT f.title AS movie_title,
       COUNT(r.rental_id) AS times_rented
FROM film f
INNER JOIN inventory i 
       ON f.film_id = i.film_id
INNER JOIN rental r 
       ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
ORDER BY times_rented DESC
LIMIT 5;

Question 14:
 Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
 Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY.

SELECT c.customer_id,
       c.first_name,
       c.last_name
FROM customer c
INNER JOIN rental r 
       ON c.customer_id = r.customer_id
INNER JOIN inventory i 
       ON r.inventory_id = i.inventory_id
WHERE i.store_id IN (1, 2)
GROUP BY c.customer_id, c.first_name, c.last_name
HAVING COUNT(DISTINCT i.store_id) = 2;

 1. Rank the customers based on the total amount they've spent on rentals.
 
 SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(p.amount) DESC) AS rank_position
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC;

 2. Calculate the cumulative revenue generated by each film over time.
 SELECT 
    f.film_id,
    f.title,
    p.payment_date,
    SUM(p.amount) OVER (
        PARTITION BY f.film_id 
        ORDER BY p.payment_date
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
ORDER BY f.film_id, p.payment_date;

 3. Determine the average rental duration for each film, considering films with similar lengths.
 SELECT 
    f.length AS film_length,
    f.film_id,
    f.title,
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.return_date IS NOT NULL
GROUP BY f.length, f.film_id, f.title
ORDER BY f.length, avg_rental_duration DESC;

4. Identify the top 3 films in each category based on their rental counts.
SELECT 
    c.name AS category_name,
    f.film_id,
    f.title,
    COUNT(r.rental_id) AS rental_count,
    RANK() OVER (
        PARTITION BY c.category_id 
        ORDER BY COUNT(r.rental_id) DESC
    ) AS film_rank
FROM film f
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY c.category_id, c.name, f.film_id, f.title
HAVING film_rank <= 3
ORDER BY c.name, film_rank;


5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(r.rental_id) AS total_rentals,
    (COUNT(r.rental_id) - (SELECT AVG(customer_rentals) 
                           FROM (
                               SELECT COUNT(r2.rental_id) AS customer_rentals
                               FROM rental r2
                               GROUP BY r2.customer_id
                           ) AS avg_rental)) AS diff_from_avg
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY diff_from_avg DESC;


 
6. Find the monthly revenue trend for the entire rental store over time.
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS monthly_revenue
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY month;

7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH customer_spending AS (
    SELECT 
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_spent,
        NTILE(5) OVER (ORDER BY SUM(p.amount) DESC) AS spending_percentile
    FROM customer c
    JOIN payment p ON c.customer_id = p.customer_id
    GROUP BY c.customer_id, c.first_name, c.last_name
)
SELECT *
FROM customer_spending
WHERE spending_percentile = 1
ORDER BY total_spent DESC;


8. Calculate the running total of rentals per category, ordered by rental count.
WITH category_rentals AS (
    SELECT 
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY c.category_id, c.name
)
SELECT 
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM category_rentals
ORDER BY rental_count DESC;

9. Find the films that have been rented less than the average rental count for their respective categories.
WITH film_rentals AS (
    SELECT 
        f.film_id,
        f.title,
        c.category_id,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY c.category_id) AS avg_category_rentals
    FROM film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY f.film_id, f.title, c.category_id, c.name
)
SELECT 
    film_id,
    title,
    category_name,
    rental_count,
    avg_category_rentals
FROM film_rentals
WHERE rental_count < avg_category_rentals
ORDER BY category_name, rental_count;

10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month,
    SUM(p.amount) AS monthly_revenue
FROM payment p
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m')
ORDER BY monthly_revenue DESC
LIMIT 5;





 
 


    

    





 